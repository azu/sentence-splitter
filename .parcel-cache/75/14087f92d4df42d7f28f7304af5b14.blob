var _parcelHelpers = require("@parcel/transformer-js/lib/esmodule-helpers.js");
_parcelHelpers.defineInteropFlag(exports);
_parcelHelpers.export(exports, "PairMaker", function () {
  return PairMaker;
});
var _logger = require("../logger");
var _object_values = require("object_values");
var _object_valuesDefault = _parcelHelpers.interopDefault(_object_values);
class PairMaker {
  pairs = {
    [`"`]: `"`,
    [`「`]: `」`,
    [`（`]: `）`,
    [`(`]: `)`,
    [`『`]: `』`,
    [`【`]: `】`,
    [`《`]: `》`
  };
  pairKeys = Object.keys(this.pairs);
  pairValues = _object_valuesDefault.default(this.pairs);
  mark(sourceCode) {
    const string = sourceCode.read();
    if (!string) {
      return;
    }
    // if current is in a context, should not start other context.
    // PairMaker does not support nest context by design.
    if (!sourceCode.isInContext()) {
      const keyIndex = this.pairKeys.indexOf(string);
      if (keyIndex !== -1) {
        const key = this.pairKeys[keyIndex];
        _logger.debugLog(`PairMaker -> enterContext: ${key}`);
        sourceCode.enterContext(key);
      }
    } else {
      // check that string is end mark?
      const valueIndex = this.pairValues.indexOf(string);
      if (valueIndex !== -1) {
        const key = this.pairKeys[valueIndex];
        _logger.debugLog(`PairMaker -> leaveContext: ${this.pairValues[valueIndex]}`);
        sourceCode.leaveContext(key);
      }
    }
  }
}
